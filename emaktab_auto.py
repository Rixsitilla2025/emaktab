import sqlite3
import requests
from datetime import datetime
from cryptography.fernet import Fernet
import threading
import time

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.progressbar import ProgressBar
from kivy.uix.scrollview import ScrollView
from kivy.uix.popup import Popup
from kivy.uix.anchorlayout import AnchorLayout
from kivy.uix.recycleview import RecycleView
from kivy.uix.recycleview.views import RecycleDataViewBehavior
from kivy.uix.recycleboxlayout import RecycleBoxLayout
from kivy.uix.recyclegridlayout import RecycleGridLayout
from kivy.uix.behaviors import FocusBehavior
from kivy.uix.recycleview.layout import LayoutSelectionBehavior
from kivy.properties import BooleanProperty
from kivy.clock import Clock
from kivy.graphics import Color, Rectangle

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_URL = "https://login.emaktab.uz"
KEY = Fernet.generate_key()
cipher = Fernet(KEY)

class SelectableRecycleBoxLayout(FocusBehavior, LayoutSelectionBehavior,
                                 RecycleBoxLayout):
    ''' Adds selection and focus behaviour to the view. '''

class SelectableLabel(RecycleDataViewBehavior, Label):
    ''' Add selection support to the Label '''
    index = None
    selected = BooleanProperty(False)
    selectable = BooleanProperty(True)

    def refresh_view_attrs(self, rv, index, data):
        ''' Catch and handle the view changes '''
        self.index = index
        return super(SelectableLabel, self).refresh_view_attrs(
            rv, index, data)

    def on_touch_down(self, touch):
        ''' Add selection on touch down '''
        if super(SelectableLabel, self).on_touch_down(touch):
            return True
        if self.collide_point(*touch.pos) and self.selectable:
            return self.parent.select_with_touch(self.index, touch)

    def apply_selection(self, rv, index, is_selected):
        ''' Respond to the selection of items in the view. '''
        self.selected = is_selected
        if is_selected:
            print("selection changed to {0}".format(rv.data[index]))
        else:
            print("selection removed for {0}".format(rv.data[index]))

class RV(RecycleView):
    def __init__(self, **kwargs):
        super(RV, self).__init__(**kwargs)
        self.data = []

class AccountManagerPopup(Popup):
    def __init__(self, main_app, **kwargs):
        super(AccountManagerPopup, self).__init__(**kwargs)
        self.main_app = main_app
        self.title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"
        self.size_hint = (0.8, 0.7)
        self.auto_dismiss = False
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = Label(
            text='–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:',
            size_hint_y=0.1,
            font_size='18sp',
            bold=True
        )
        main_layout.add_widget(title_label)
        
        # RecycleView –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.rv = RV()
        self.rv.viewclass = 'SelectableLabel'
        self.rv.size_hint_y = 0.7
        
        # Layout –¥–ª—è RecycleView
        layout = SelectableRecycleBoxLayout(
            default_size=(None, 40),
            default_size_hint=(1, None),
            size_hint_y=None,
            orientation='vertical'
        )
        layout.bind(minimum_height=layout.setter('height'))
        self.rv.add_widget(layout)
        
        main_layout.add_widget(self.rv)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = BoxLayout(size_hint_y=0.2, spacing=10)
        
        delete_btn = Button(
            text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π',
            on_press=self.delete_selected,
            background_color=(0.8, 0.2, 0.2, 1)
        )
        
        refresh_btn = Button(
            text='–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫',
            on_press=self.load_accounts,
            background_color=(0.2, 0.5, 0.8, 1)
        )
        
        close_btn = Button(
            text='–ó–∞–∫—Ä—ã—Ç—å',
            on_press=self.dismiss,
            background_color=(0.5, 0.5, 0.5, 1)
        )
        
        buttons_layout.add_widget(delete_btn)
        buttons_layout.add_widget(refresh_btn)
        buttons_layout.add_widget(close_btn)
        
        main_layout.add_widget(buttons_layout)
        
        self.content = main_layout
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.load_accounts()
    
    def load_accounts(self, *args):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        users = self.main_app.get_all_users()
        self.rv.data = []
        
        for user in users:
            status_icon = "[OK]" if user['is_active'] else "[NO]"
            self.rv.data.append({
                'text': f"{status_icon} {user['login']}",
                'login': user['login'],
                'is_active': user['is_active']
            })
    
    def delete_selected(self, *args):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º layout manager –∏–∑ RecycleView
            layout_manager = None
            for child in self.rv.children:
                if hasattr(child, 'selected_nodes'):
                    layout_manager = child
                    break
            
            if layout_manager and layout_manager.selected_nodes:
                selected_index = layout_manager.selected_nodes[0]
                if selected_index < len(self.rv.data):
                    login = self.rv.data[selected_index]['login']
                    self.main_app.delete_user(login)
                    self.load_accounts()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                    self.main_app.update_stats()
                else:
                    self.main_app.log("–û–®–ò–ë–ö–ê: –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            else:
                self.main_app.log("–û–®–ò–ë–ö–ê: –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        except Exception as e:
            self.main_app.log(f"–û–®–ò–ë–ö–ê —É–¥–∞–ª–µ–Ω–∏—è: {e}")

class EmaktabAutoApp(App):
    def build(self):
        self.title = "Emaktab Auto"
        self.is_running = False
        self.countdown_time = 0
        
        # –ì–ª–∞–≤–Ω—ã–π layout —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ–Ω–æ–º
        main_layout = BoxLayout(orientation='vertical', padding=20, spacing=15)
        main_layout.canvas.before.clear()
        with main_layout.canvas.before:
            Color(0.95, 0.98, 1.0, 1)  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
            Rectangle(pos=main_layout.pos, size=main_layout.size)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        title = Label(
            text="Emaktab Auto",
            size_hint=(1, 0.08),
            font_size='28sp',
            bold=True,
            color=(0.2, 0.4, 0.8, 1)  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
        )
        main_layout.add_widget(title)
        
        # 1. –ë–û–õ–¨–®–ê–Ø –ö–ù–û–ü–ö–ê –í –¶–ï–ù–¢–†–ï
        self.main_button = Button(
            text='–ó–∞–ø—É—Å—Ç–∏—Ç—å',
            size_hint=(1, 0.15),
            font_size='22sp',
            bold=True,
            background_color=(0.0, 0.6, 1.0, 1),  # –Ø—Ä–∫–æ-—Å–∏–Ω–∏–π
            background_normal='',
            background_down=''
        )
        self.main_button.bind(on_press=self.toggle_activity)
        main_layout.add_widget(self.main_button)
        
        # 2. –ü–û–õ–Ø –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í
        add_section = BoxLayout(orientation='vertical', spacing=10, size_hint=(1, 0.2))
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        input_layout = BoxLayout(orientation='horizontal', spacing=10, size_hint=(1, 0.6))
        
        self.login_input = TextInput(
            hint_text='–õ–æ–≥–∏–Ω',
            size_hint=(0.5, 1),
            multiline=False,
            font_size='16sp',
            background_color=(1, 1, 1, 0.9),
            foreground_color=(0.2, 0.2, 0.2, 1),
            hint_text_color=(0.5, 0.5, 0.5, 1)
        )
        
        self.password_input = TextInput(
            hint_text='–ü–∞—Ä–æ–ª—å',
            size_hint=(0.5, 1),
            password=True,
            multiline=False,
            font_size='16sp',
            background_color=(1, 1, 1, 0.9),
            foreground_color=(0.2, 0.2, 0.2, 1),
            hint_text_color=(0.5, 0.5, 0.5, 1)
        )
        
        input_layout.add_widget(self.login_input)
        input_layout.add_widget(self.password_input)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_btn = Button(
            text='–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
            size_hint=(1, 0.4),
            font_size='16sp',
            bold=True,
            background_color=(0.2, 0.8, 0.4, 1),  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
            background_normal='',
            background_down=''
        )
        self.add_btn.bind(on_press=self.register_user)
        
        add_section.add_widget(input_layout)
        add_section.add_widget(self.add_btn)
        main_layout.add_widget(add_section)
        
        # 3. –°–ü–ò–°–û–ö –ê–ö–ö–ê–£–ù–¢–û–í
        accounts_section = BoxLayout(orientation='vertical', spacing=5, size_hint=(1, 0.25))
        
        accounts_title = Label(
            text="–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
            size_hint=(1, 0.2),
            font_size='16sp',
            bold=True,
            color=(0.3, 0.3, 0.3, 1)
        )
        accounts_section.add_widget(accounts_title)
        
        # ScrollView –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.accounts_scroll = ScrollView(size_hint=(1, 0.8))
        self.accounts_layout = BoxLayout(orientation='vertical', spacing=5, size_hint_y=None)
        self.accounts_layout.bind(minimum_height=self.accounts_layout.setter('height'))
        self.accounts_scroll.add_widget(self.accounts_layout)
        accounts_section.add_widget(self.accounts_scroll)
        
        main_layout.add_widget(accounts_section)
        
        # 4. –õ–û–ì–ò
        logs_section = BoxLayout(orientation='vertical', spacing=5, size_hint=(1, 0.32))
        
        logs_title = Label(
            text="–õ–æ–≥–∏:",
            size_hint=(1, 0.15),
            font_size='16sp',
            bold=True,
            color=(0.3, 0.3, 0.3, 1)
        )
        logs_section.add_widget(logs_title)
        
        # ScrollView –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_scroll = ScrollView(size_hint=(1, 0.85))
        self.log_label = Label(
            text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å".\n',
            size_hint_y=None,
            text_size=(None, None),
            halign='left',
            valign='top',
            font_size='14sp',
            color=(0.2, 0.2, 0.2, 1)
        )
        self.log_label.bind(texture_size=self.log_label.setter('size'))
        self.logs_scroll.add_widget(self.log_label)
        logs_section.add_widget(self.logs_scroll)
        
        main_layout.add_widget(logs_section)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        self.init_db()
        self.update_accounts_list()
        
        return main_layout
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('emaktab_users.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                login TEXT UNIQUE,
                password_encrypted TEXT,
                session_cookies TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        self.log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        current_text = self.log_label.text
        new_text = f"[{timestamp}] {message}\n{current_text}"
        self.log_label.text = new_text
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ª–æ–≥–∏ –≤–Ω–∏–∑
        Clock.schedule_once(self.scroll_logs_to_bottom, 0.1)
    
    def scroll_logs_to_bottom(self, dt):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ª–æ–≥–æ–≤ –≤–Ω–∏–∑"""
        try:
            self.logs_scroll.scroll_y = 0
        except:
            pass
    
    def update_accounts_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        self.accounts_layout.clear_widgets()
        
        users = self.get_all_users()
        
        if not users:
            no_accounts_label = Label(
                text="–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                size_hint_y=None,
                height=40,
                font_size='14sp',
                color=(0.7, 0.7, 0.7, 1)
            )
            self.accounts_layout.add_widget(no_accounts_label)
            return
        
        for user in users:
            account_layout = BoxLayout(orientation='horizontal', spacing=10, size_hint_y=None, height=40)
            
            # –°—Ç–∞—Ç—É—Å –∏ –ª–æ–≥–∏–Ω
            status_icon = "[OK]" if user['is_active'] else "[NO]"
            account_label = Label(
                text=f"{status_icon} {user['login']}",
                size_hint_x=0.8,
                text_size=(None, None),
                halign='left',
                font_size='14sp'
            )
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            delete_btn = Button(
                text="X",
                size_hint_x=0.2,
                background_color=(1.0, 0.3, 0.3, 1),  # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
                font_size='14sp',
                bold=True
            )
            delete_btn.bind(on_press=lambda x, login=user['login']: self.delete_user_from_list(login))
            
            account_layout.add_widget(account_label)
            account_layout.add_widget(delete_btn)
            
            self.accounts_layout.add_widget(account_layout)
    
    def encrypt_data(self, data):
        return cipher.encrypt(data.encode()).decode()
    
    def decrypt_data(self, encrypted_data):
        return cipher.decrypt(encrypted_data.encode()).decode()
    
    def register_user(self, instance):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            login = self.login_input.text.strip()
            password = self.password_input.text.strip()
            
            if not login or not password:
                self.log("–û–®–ò–ë–ö–ê: –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞
            existing_users = self.get_all_users()
            if any(user['login'] == login for user in existing_users):
                self.log(f"–û–®–ò–ë–ö–ê: –ê–∫–∫–∞—É–Ω—Ç {login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            self.log(f"üîê –ü—Ä–æ–≤–µ—Ä—è—é {login}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω –Ω–∞ emaktab
            if self.test_login(login, password):
                self.save_user(login, password)
                self.log(f"–£–°–ü–ï–•: –ê–∫–∫–∞—É–Ω—Ç {login} –¥–æ–±–∞–≤–ª–µ–Ω!")
                self.login_input.text = ""
                self.password_input.text = ""
                self.update_accounts_list()
            else:
                self.log(f"–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è {login}")
                
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.login_input.text = ""
            self.password_input.text = ""
    
    def test_login(self, login, password):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            self.log(f"üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {BASE_URL}...")
            
            session = requests.Session()
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
                'Accept-Encoding': 'gzip, deflate',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Origin': BASE_URL,
                'Referer': f"{BASE_URL}/",
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            })
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.log("üìÑ –ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            main_page = session.get(BASE_URL, timeout=10)
            self.log(f"–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {main_page.status_code})")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞
            self.log("üîê –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞...")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
            login_data_variants = [
                {'login': login, 'password': password},
                {'username': login, 'password': password},
                {'email': login, 'password': password},
                {'user': login, 'pass': password},
                {'login': login, 'pass': password},
            ]
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            endpoints = ['/auth', '/login', '/signin']
            
            for endpoint in endpoints:
                for i, login_data in enumerate(login_data_variants):
                    try:
                        self.log(f"üîÑ –ü—Ä–æ–±—É—é –≤–∞—Ä–∏–∞–Ω—Ç {i+1} –Ω–∞ {endpoint}...")
                        response = session.post(f"{BASE_URL}{endpoint}", data=login_data, timeout=10, allow_redirects=True)
                        self.log(f"üì§ –û—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}, URL: {response.url}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                        if response.status_code == 200:
                            response_text = response.text.lower()
                            final_url = response.url.lower()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
                            if 'login' in final_url or 'auth' in final_url or 'signin' in final_url:
                                self.log(f"–û–®–ò–ë–ö–ê: –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –æ—Å—Ç–∞–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞")
                                continue
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—à–∏–±–∫–∏
                            if any(word in response_text for word in ['error', '–Ω–µ–≤–µ—Ä–Ω—ã–π', '–æ—à–∏–±–∫–∞', 'invalid', 'incorrect']):
                                self.log(f"–û–®–ò–ë–ö–ê: –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                                continue
                            
                            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!
                            self.log(f"–ó–ê–®–ï–õ! –í–∞—Ä–∏–∞–Ω—Ç {i+1} —Å—Ä–∞–±–æ—Ç–∞–ª!")
                            self.save_session(login, session.cookies)
                            self.log("üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                            return True
                            
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}: {e}")
                        continue
            
            self.log("–ù–ï –ó–ê–®–ï–õ - –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
            return False
            
        except Exception as e:
            self.log(f"–ù–ï –ó–ê–®–ï–õ - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def save_session(self, login, cookies):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect('emaktab_users.db')
            cursor = conn.cursor()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º cookies –≤ —Å—Ç—Ä–æ–∫—É
            cookies_str = '; '.join([f"{c.name}={c.value}" for c in cookies])
            
            cursor.execute('''
                UPDATE users SET session_cookies = ? WHERE login = ?
            ''', (cookies_str, login))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
    
    def get_session(self, login):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect('emaktab_users.db')
            cursor = conn.cursor()
            
            cursor.execute('SELECT session_cookies FROM users WHERE login = ?', (login,))
            result = cursor.fetchone()
            
            conn.close()
            
            if result and result[0]:
                return result[0]
            return None
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    def save_user(self, login, password):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        try:
            conn = sqlite3.connect('emaktab_users.db')
            cursor = conn.cursor()
            
            password_encrypted = self.encrypt_data(password)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR REPLACE –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            cursor.execute('''
                INSERT OR REPLACE INTO users (login, password_encrypted, is_active, created_at)
                VALUES (?, ?, 1, CURRENT_TIMESTAMP)
            ''', (login, password_encrypted))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise
    
    def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect('emaktab_users.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT login, password_encrypted, is_active FROM users')
        users = cursor.fetchall()
        
        result = []
        for login, pass_enc, is_active in users:
            try:
                password = self.decrypt_data(pass_enc)
                result.append({
                    'login': login, 
                    'password': password,
                    'is_active': is_active
                })
            except:
                continue
        
        conn.close()
        return result
    
    def delete_user(self, login):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('emaktab_users.db')
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM users WHERE login = ?', (login,))
        conn.commit()
        conn.close()
        
        self.log(f"üóëÔ∏è –ê–∫–∫–∞—É–Ω—Ç {login} —É–¥–∞–ª–µ–Ω")
        self.update_accounts_list()
    
    def delete_user_from_list(self, login):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
        self.delete_user(login)
    
    def show_account_manager(self, instance):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        users = self.get_all_users()
        
        if not users:
            self.log("üìù –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π popup –±–µ–∑ RecycleView
        content = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        title_label = Label(
            text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏",
            size_hint_y=0.1,
            font_size='18sp',
            bold=True
        )
        content.add_widget(title_label)
        
        # –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ ScrollView
        scroll = ScrollView(size_hint_y=0.7)
        accounts_layout = BoxLayout(orientation='vertical', spacing=5, size_hint_y=None)
        accounts_layout.bind(minimum_height=accounts_layout.setter('height'))
        
        for user in users:
            account_layout = BoxLayout(orientation='horizontal', spacing=10, size_hint_y=None, height=40)
            
            status_icon = "[OK]" if user['is_active'] else "[NO]"
            account_label = Label(
                text=f"{status_icon} {user['login']}",
                size_hint_x=0.6,
                text_size=(None, None),
                halign='left'
            )
            
            delete_btn = Button(
                text="üóëÔ∏è",
                size_hint_x=0.2,
                background_color=(0.8, 0.2, 0.2, 1)
            )
            delete_btn.bind(on_press=lambda x, login=user['login']: self.delete_user_from_simple_popup(login, popup))
            
            toggle_btn = Button(
                text="üîÑ" if user['is_active'] else "‚ñ∂Ô∏è",
                size_hint_x=0.2,
                background_color=(0.2, 0.6, 0.2, 1) if user['is_active'] else (0.6, 0.6, 0.2, 1)
            )
            toggle_btn.bind(on_press=lambda x, login=user['login']: self.toggle_user_status_simple(login, popup))
            
            account_layout.add_widget(account_label)
            account_layout.add_widget(toggle_btn)
            account_layout.add_widget(delete_btn)
            
            accounts_layout.add_widget(account_layout)
        
        scroll.add_widget(accounts_layout)
        content.add_widget(scroll)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = Button(
            text="–ó–∞–∫—Ä—ã—Ç—å",
            size_hint_y=0.1,
            background_color=(0.5, 0.5, 0.5, 1)
        )
        content.add_widget(close_btn)
        
        popup = Popup(
            title="",
            content=content,
            size_hint=(0.8, 0.7),
            auto_dismiss=False
        )
        
        close_btn.bind(on_press=popup.dismiss)
        popup.open()
    
    def delete_user_from_simple_popup(self, login, popup):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ popup"""
        self.delete_user(login)
        popup.dismiss()
        self.show_account_manager(None)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    
    def toggle_user_status_simple(self, login, popup):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Å—Ç–æ–º popup"""
        conn = sqlite3.connect('emaktab_users.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        cursor.execute('SELECT is_active FROM users WHERE login = ?', (login,))
        current_status = cursor.fetchone()[0]
        new_status = not current_status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cursor.execute('UPDATE users SET is_active = ? WHERE login = ?', (new_status, login))
        conn.commit()
        conn.close()
        
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        self.log(f"üîÑ –ê–∫–∫–∞—É–Ω—Ç {login} {status_text}")
        
        popup.dismiss()
        self.show_account_manager(None)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        self.update_stats()
    
    
    def toggle_activity(self, instance):
        """–ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)"""
        if not self.is_running:
            self.start_activity()
    
    def start_activity(self):
        """–ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        users = self.get_all_users()
        active_users = [user for user in users if user['is_active']]
        
        if not active_users:
            self.log("–û–®–ò–ë–ö–ê: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            return
        
        self.is_running = True
        self.main_button.text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
        self.main_button.background_color = (1.0, 0.6, 0.0, 1)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        self.main_button.disabled = True
        
        self.log(f"–ó–∞–ø—É—Å–∫ –≤—Ö–æ–¥–∞ –¥–ª—è {len(active_users)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.activity_thread = threading.Thread(target=self.run_activity, args=(active_users,))
        self.activity_thread.daemon = True
        self.activity_thread.start()
    
    def finish_activity(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.is_running = False
        self.main_button.text = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        self.main_button.background_color = (0.0, 0.8, 0.2, 1)  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
        self.main_button.disabled = False
        
        self.log("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        Clock.schedule_once(self.reset_button, 3)
    
    def reset_button(self, dt):
        """–°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.main_button.text = "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
        self.main_button.background_color = (0.0, 0.6, 1.0, 1)  # –Ø—Ä–∫–æ-—Å–∏–Ω–∏–π
    
    def show_countdown_on_button(self, total_seconds):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ"""
        self.countdown_time = total_seconds
        
        def update_countdown(dt):
            self.countdown_time -= dt
            if self.countdown_time > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞: 3, 2, 1
                countdown_number = int(self.countdown_time) + 1
                if countdown_number > 0:
                    self.main_button.text = f"{countdown_number}"
                else:
                    self.main_button.text = "1"
                return True  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç—Å—á–µ—Ç
            else:
                self.main_button.text = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                self.main_button.background_color = (0.0, 0.8, 0.2, 1)  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
                return False  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—á–µ—Ç
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        Clock.schedule_interval(update_countdown, 0.1)
    
    def run_activity(self, users):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        while self.is_running:
            for i, user in enumerate(users):
                if not self.is_running:
                    break
                
                try:
                    self.log(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {user['login']}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    session_cookies = self.get_session(user['login'])
                    
                    if session_cookies:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                        success = self.perform_activity_with_session(user['login'], session_cookies)
                        if success:
                            self.log(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è {user['login']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        else:
                            self.log(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {user['login']} —É—Å—Ç–∞—Ä–µ–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥")
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥
                    else:
                        self.log(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è {user['login']}")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                        self.show_countdown_on_button(3)
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ –Ω–æ–≤–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    # progress_value = ((i + 1) / len(users)) * 100
                    # self.progress.value = progress_value
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (1-3 —Å–µ–∫—É–Ω–¥—ã)
                    if i < len(users) - 1:  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        import random
                        pause = random.uniform(1, 3)
                        self.log(f"‚è∏Ô∏è –ü–∞—É–∑–∞ {pause:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º...")
                        time.sleep(pause)
                    
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è {user['login']}: {e}")
            
            if self.is_running:
                self.log("–¶–∏–∫–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                Clock.schedule_once(lambda dt: self.finish_activity(), 0.1)
                break
    
    def perform_activity_with_session(self, login, session_cookies):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            self.log(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Å—Å–∏—é –¥–ª—è {login}...")
            
            session = requests.Session()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies
            self.log("üç™ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é cookies...")
            for cookie in session_cookies.split('; '):
                if '=' in cookie:
                    name, value = cookie.split('=', 1)
                    session.cookies.set(name, value)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∑–∞—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.log("üåê –ó–∞—Ö–æ–∂—É –Ω–∞ emaktab.uz...")
            response = session.get("https://emaktab.uz", timeout=10)
            self.log(f"üìä –û—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
            if response.status_code == 200:
                if 'login' in response.url.lower():
                    self.log(f"–û–®–ò–ë–ö–ê: {login} - –°–ï–°–°–ò–Ø –ò–°–¢–ï–ö–õ–ê (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ª–æ–≥–∏–Ω)")
                    return False
                else:
                    self.log(f"–£–°–ü–ï–•: {login} - –ê–ö–¢–ò–í–ù–û–°–¢–¨ –í–´–ü–û–õ–ù–ï–ù–ê (–∑–∞—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É)")
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å–∞–π—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã
                    delay = 3  # –†–æ–≤–Ω–æ 3 —Å–µ–∫—É–Ω–¥—ã
                    import datetime
                    start_time = datetime.datetime.now()
                    self.log(f"–ò–º–∏—Ç–∏—Ä—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ {delay} —Å–µ–∫... (–Ω–∞—á–∞–ª–æ: {start_time.strftime('%H:%M:%S')})")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
                    self.show_countdown_on_button(delay)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥—ã
                    for i in range(int(delay)):
                        remaining = delay - i
                        self.log(f"  -> –û—Å—Ç–∞–ª–æ—Å—å {remaining:.0f} —Å–µ–∫ –Ω–∞ —Å–∞–π—Ç–µ...")
                        time.sleep(1)
                    
                    end_time = datetime.datetime.now()
                    total_time = (end_time - start_time).total_seconds()
                    self.log(f"  -> –í—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ –∏—Å—Ç–µ–∫–ª–æ! (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_time:.1f} —Å–µ–∫)")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
                    try:
                        # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                        pages = ['/userfeed', '/profile', '/notifications']
                        num_pages = random.randint(1, 2)  # 1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        selected_pages = pages[:num_pages]
                        
                        self.log(f"  -> –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–º–æ—Ç—Ä {num_pages} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...")
                        for page in selected_pages:
                            self.log(f"  -> –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page}")
                            response = session.get(f'https://emaktab.uz{page}', timeout=5)
                            page_delay = random.uniform(1, 2)
                            self.log(f"  -> –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} {page_delay:.1f} —Å–µ–∫...")
                            time.sleep(page_delay)
                        
                        self.log(f"  -> –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {login}")
                    except Exception as e:
                        self.log(f"  -> –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                    
                    return True
            else:
                self.log(f"–û–®–ò–ë–ö–ê: {login} - –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê (—Å—Ç–∞—Ç—É—Å {response.status_code})")
                return False
                
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê: {login} - –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: {e}")
            return False

if __name__ == '__main__':
    EmaktabAutoApp().run()
